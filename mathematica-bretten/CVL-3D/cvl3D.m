(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input:: *)
SetDirectory["/home/julian/mathematica/CVL-3D"];
ClearSystemCache[];
Needs["Splines`"];
Needs["DifferentialEquations`NDSolveProblems`"];
Needs["DifferentialEquations`NDSolveUtilities`"];
Needs["DifferentialEquations`InterpolatingFunctionAnatomy`"];
Needs["ErrorBarPlots`"];
Directory[]


(* ::Input:: *)
SetOptions[Interpolation, InterpolationOrder -> 4, PeriodicInterpolation -> True];
Options[Interpolation]


(* ::Input:: *)
SetOptions[NIntegrate, MaxRecursion -> 20];
Options[NIntegrate, MaxRecursion]


(* ::Input:: *)
SetOptions[NDSolve`FiniteDifferenceDerivative, DifferenceOrder -> 6, PeriodicInterpolation -> True];
Options[NDSolve`FiniteDifferenceDerivative]


(* ::Input:: *)
SetOptions[NDSolve, MaxSteps -> 15000];
Options[NDSolve, {MaxSteps, InterpolationOrder}]


(* ::Input:: *)
SetOptions[NDSolve`ProcessEquations, MaxSteps -> 15000];
Options[NDSolve`ProcessEquations, MaxSteps]


Clear[c2fitL,vtabL,ktabL,c2fitA,vtabA,ktabA];

c2fitL[n_Integer,t1_,t2_,pts_:50]:=
Block[{data,expr,pars,cf},
data=Table[{t1 +(t2-t1)i/pts,(c[t1 +(t2-t1)i/pts]/.Subscript[csolL, n][[1]])^2},{i,0,pts}];
expr=k Abs[(100-t)]^v;
pars={{k,400},{v,1}};
cf=FindFit[data,expr,pars,t];
{Sqrt[k],v/2}/.cf
];

vtabL[n_Integer,t1_,t2_,int_:10]:=
Quiet[
TableForm[Table[c2fitL[i,t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int][[2]],{j,1,int},{i,1,n}],
TableHeadings->{Table[{t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int},{j,1,int}],Table[i,{i,1,n}]}]
];

ktabL[n_Integer,t1_,t2_,int_:10]:=
Quiet[
TableForm[Table[c2fitL[i,t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int][[1]],{j,1,int},{i,1,n}],
TableHeadings->{Table[{t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int},{j,1,int}],Table[i,{i,1,n}]}]
];

c2fitA[n_Integer,t1_,t2_,pts_:50]:=
Block[{data,expr,pars,cf},
data=Table[{t1 +(t2-t1)i/pts,(c[t1 +(t2-t1)i/pts]/.Subscript[csolA, n][[1]])^2},{i,0,pts}];
expr=k Abs[(100-t)]^v;
pars={{k,400},{v,1}};
cf=FindFit[data,expr,pars,t];
{Sqrt[k],v/2}/.cf
];

vtabA[n_Integer,t1_,t2_,int_:10]:=
Quiet[
TableForm[Table[c2fitA[i,t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int][[2]],{j,1,int},{i,1,n}],
TableHeadings->{Table[{t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int},{j,1,int}],Table[i,{i,1,n}]}]
];

ktabA[n_Integer,t1_,t2_,int_:10]:=
Quiet[
TableForm[Table[c2fitA[i,t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int][[1]],{j,1,int},{i,1,n}],
TableHeadings->{Table[{t1+(t2-t1)( j-1)/int,t1+(t2-t1) j/int},{j,1,int}],Table[i,{i,1,n}]}]
];



