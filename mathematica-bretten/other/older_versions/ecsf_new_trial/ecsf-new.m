(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input:: *)
SetDirectory["/home/julian/mathematica/ecsf_new_trial"];
ClearSystemCache[];
Needs["Splines`"];
Needs["DifferentialEquations`NDSolveProblems`"];
Needs["DifferentialEquations`NDSolveUtilities`"];
Needs["DifferentialEquations`InterpolatingFunctionAnatomy`"];


(* ::Input:: *)
SetOptions[Interpolation, InterpolationOrder -> 4, PeriodicInterpolation -> True];
Options[Interpolation]


(* ::Input:: *)
SetOptions[NIntegrate, MaxRecursion -> 20];
Options[NIntegrate, MaxRecursion]


(* ::Input:: *)
SetOptions[NDSolve`FiniteDifferenceDerivative, DifferenceOrder -> 6, PeriodicInterpolation -> True];
Options[NDSolve`FiniteDifferenceDerivative]


(* ::Input:: *)
SetOptions[NDSolve, MaxSteps -> 15000];
Options[NDSolve, {MaxSteps, InterpolationOrder}]


(* ::Input:: *)
SetOptions[NDSolve`ProcessEquations, MaxSteps -> 15000];
Options[NDSolve`ProcessEquations, MaxSteps]


(* ::Input:: *)
Clear[pcg,rpcg];
pcg[num_,xy__List]:=
Module[{pts,n,spline,
fpts=50,order=8,xpts,ypts,xexp,yexp,xfk,yfk,xpara,ypara,xfitdat,yfitdat,
initialcurve,area,length,centroid},

pts=xy;
n=Length[pts];
pts=Append[pts,First[pts]];
pts=Join[{pts[[-3]],pts[[-2]]},pts,{pts[[2]],pts[[3]]}];
spline=SplineFit[pts,Cubic];

xpts=Table[{i 2\[Pi]/fpts,spline[2+(n)i/fpts][[1]]},{i,0,fpts}];
ypts=Table[{i 2\[Pi]/fpts,spline[2+(n)i/fpts][[2]]},{i,0,fpts}];
xexp[u_]:=Sum[Subscript[xfk, i] Cos[i u]+Subscript[xfk, order+i]Sin[i u],{i,0,order}];
yexp[u_]:=Sum[Subscript[yfk, i] Cos[i u]+Subscript[yfk, order+i]Sin[i u],{i,0,order}];
xpara=Table[Subscript[xfk, i] ,{i,0,2 order}];
ypara=Table[Subscript[yfk, i] ,{i,0,2 order}];
xfitdat=FindFit[xpts,xexp[u],xpara ,u];
yfitdat=FindFit[ypts,yexp[u],ypara ,u];
initialcurve[u_]:={xexp[u]/.xfitdat,yexp[u]/.yfitdat};

 area=1/2 
NIntegrate[Evaluate[(initialcurve[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(1\)\(]\)]\)\))-(initialcurve[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(2\)\(]\)]\)\))],{u,0,2\[Pi]}
];
length=NIntegrate[Sqrt[Evaluate[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\))]],{u,0,2\[Pi]}];
centroid=1/length 
NIntegrate[initialcurve[u] Sqrt[Evaluate[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\))]],{u,0,2\[Pi]},AccuracyGoal->9];

Subscript[curve, num][u_]:=10Sqrt[2\[Pi]/area](initialcurve[u]-centroid);
Subscript[inilen, num]=10Sqrt[2\[Pi]/area]length;

Show[
ListPlot[10Sqrt[2\[Pi]/area]Table[xy[[i]]-centroid,{i,1,n}],PlotStyle->{Red,PointSize[Medium]},AspectRatio->Full],
ListPlot[Table[Subscript[curve, num][2Pi i/100],{i,0,100}],AspectRatio->Full],
ParametricPlot[Subscript[curve, num][u],{u,0,2Pi}]]

];


rpcg[num_,xy__List]:=
Module[{pts,n,spline,
fpts=50,order=8,xpts,ypts,xexp,yexp,xfk,yfk,xpara,ypara,xfitdat,yfitdat,
initialcurve,area,length,centroid,curve},

pts=xy;
n=Length[pts];
pts=Append[pts,First[pts]];
pts=Join[{pts[[-3]],pts[[-2]]},pts,{pts[[2]],pts[[3]]}];
spline=SplineFit[pts,Cubic];

xpts=Table[{i 2\[Pi]/fpts,spline[2+(n)i/fpts][[1]]},{i,0,fpts}];
ypts=Table[{i 2\[Pi]/fpts,spline[2+(n)i/fpts][[2]]},{i,0,fpts}];
xexp[u_]:=Sum[Subscript[xfk, i] Cos[i u]+Subscript[xfk, order+i]Sin[i u],{i,0,order}];
yexp[u_]:=Sum[Subscript[yfk, i] Cos[i u]+Subscript[yfk, order+i]Sin[i u],{i,0,order}];
xpara=Table[Subscript[xfk, i] ,{i,0,2 order}];
ypara=Table[Subscript[yfk, i] ,{i,0,2 order}];
xfitdat=FindFit[xpts,xexp[u],xpara ,u];
yfitdat=FindFit[ypts,yexp[u],ypara ,u];
initialcurve[u_]:={xexp[u]/.xfitdat,yexp[u]/.yfitdat};

 area=1/2 
NIntegrate[Evaluate[(initialcurve[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(1\)\(]\)]\)\))-(initialcurve[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(2\)\(]\)]\)\))],{u,0,2\[Pi]}
];
length=NIntegrate[Sqrt[Evaluate[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\))]],{u,0,2\[Pi]}];
centroid=1/length 
NIntegrate[initialcurve[u] Sqrt[Evaluate[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\))]],{u,0,2\[Pi]},AccuracyGoal->9];

Subscript[curve, num][u_]:=10Sqrt[2\[Pi]/area](initialcurve[u]-centroid);

Print[
TableForm[{{
ParametricPlot[spline[u],{u,0,Length[pts]}],
Show[
ListPlot[xy,PlotStyle->{Red,PointSize[Medium]},AspectRatio->Full],
ListPlot[Table[spline[2+(n)i/100],{i,0,100}]],
ParametricPlot[spline[u],{u,2,2+n}]],
Show[
ListPlot[xy,PlotStyle->{Red,PointSize[Medium]},AspectRatio->Full,Axes->False],
ListPlot[Table[initialcurve[2Pi i/100],{i,0,100}]],
ParametricPlot[initialcurve[u],{u,0,2Pi}],
Graphics[{Green,PointSize[Medium],Point[centroid]}]],
Show[
ListPlot[10Sqrt[2\[Pi]/area]Table[xy[[i]]-centroid,{i,1,n}],PlotStyle->{Red,PointSize[Medium]},AspectRatio->Full],
ListPlot[Table[Subscript[curve, num][2Pi i/100],{i,0,100}],AspectRatio->Full],
ParametricPlot[Subscript[curve, num][u],{u,0,2Pi}]]
}}]
];
]


(* ::Input:: *)
Clear[proequ];

proequ[t0_:0,icpts_List]:=
Module[{n,grdpts,ugrid,X,Y,xu,xuu,yu,yuu,v,xeqns,yeqns,ic,xic,yic},

n=Length[icpts]-1;
grdpts=Range[0,n];
ugrid=icpts[[All,1]];

X[t_]=Through[Thread[Subscript[x, grdpts]][t]];
Y[t_]=Through[Thread[Subscript[y, grdpts]][t]];

xu=NDSolve`FiniteDifferenceDerivative[Derivative[1],ugrid,X[t]];
yu=NDSolve`FiniteDifferenceDerivative[Derivative[1],ugrid,Y[t]];
xuu=NDSolve`FiniteDifferenceDerivative[Derivative[2],ugrid,X[t]];
yuu=NDSolve`FiniteDifferenceDerivative[Derivative[2],ugrid,Y[t]];
v=Sqrt[xu^2+yu^2];

xeqns = Thread[\!\(
\*SubscriptBox[\(\[PartialD]\), \(t\)]\(X[t]\)\) ==v^(-2)(-v^(-2)(xu xuu +yu yuu)xu+xuu)];
yeqns = Thread[\!\(
\*SubscriptBox[\(\[PartialD]\), \(t\)]\(Y[t]\)\) ==v^(-2)(-v^(-2)(xu xuu +yu yuu)yu+yuu)];

ic=Flatten@Table[Thread[{Subscript[x, i][t0],Subscript[y, i][t0]}==icpts[[i+1,2]]],{i,0,n}];

First[
NDSolve`ProcessEquations[
Join[xeqns,yeqns,ic],
Join[Thread[Subscript[x, grdpts]],Thread[Subscript[y, grdpts]]],
t]
]

];



