(* ::Package:: *)

(************************************************************************)
(* This file was generated automatically by the Mathematica front end.  *)
(* It contains Initialization cells from a Notebook file, which         *)
(* typically will have the same name as this file except ending in      *)
(* ".nb" instead of ".m".                                               *)
(*                                                                      *)
(* This file is intended to be loaded into the Mathematica kernel using *)
(* the package loading commands Get or Needs.  Doing so is equivalent   *)
(* to using the Evaluate Initialization Cells menu command in the front *)
(* end.                                                                 *)
(*                                                                      *)
(* DO NOT EDIT THIS FILE.  This entire file is regenerated              *)
(* automatically each time the parent Notebook file is saved in the     *)
(* Mathematica front end.  Any changes you make to this file will be    *)
(* overwritten.                                                         *)
(************************************************************************)



(* ::Input:: *)
SetDirectory["/home/julian/mathematica/CVL-electron"];
ClearSystemCache[];
Needs["Splines`"];
Needs["DifferentialEquations`NDSolveProblems`"];
Needs["DifferentialEquations`NDSolveUtilities`"];
Needs["DifferentialEquations`InterpolatingFunctionAnatomy`"];


(* ::Input:: *)
SetOptions[Interpolation, InterpolationOrder -> 4, PeriodicInterpolation -> True];
Options[Interpolation]


(* ::Input:: *)
SetOptions[NIntegrate, MaxRecursion -> 20];
Options[NIntegrate, MaxRecursion]


(* ::Input:: *)
SetOptions[NDSolve`FiniteDifferenceDerivative, DifferenceOrder -> 6, PeriodicInterpolation -> True];
Options[NDSolve`FiniteDifferenceDerivative]


(* ::Input:: *)
SetOptions[NDSolve, MaxSteps -> 15000];
Options[NDSolve, {MaxSteps, InterpolationOrder}]


(* ::Input:: *)
SetOptions[NDSolve`ProcessEquations, MaxSteps -> 15000];
Options[NDSolve`ProcessEquations, MaxSteps]


(* ::Input:: *)
Clear[curgen];

curgen[num_,xy__List]:=
Module[{pts,n,spline,
fpts=50,order=8,xpts,ypts,xexp,yexp,xfk,yfk,xpara,ypara,xfitdat,yfitdat,
initialcurve,initialarea,add,length,centroid},

pts=xy;
n=Length[pts];
pts=Append[pts,First[pts]];
pts=Join[{pts[[-3]],pts[[-2]]},pts,{pts[[2]],pts[[3]]}];
spline=SplineFit[pts,Cubic];

xpts=Table[{i 2\[Pi]/fpts,spline[2+(n)i/fpts][[1]]},{i,0,fpts}];
ypts=Table[{i 2\[Pi]/fpts,spline[2+(n)i/fpts][[2]]},{i,0,fpts}];
xexp[u_]:=Sum[Subscript[xfk, i] Cos[i u]+Subscript[xfk, order+i]Sin[i u],{i,0,order}];
yexp[u_]:=Sum[Subscript[yfk, i] Cos[i u]+Subscript[yfk, order+i]Sin[i u],{i,0,order}];
xpara=Table[Subscript[xfk, i] ,{i,0,2 order}];
ypara=Table[Subscript[yfk, i] ,{i,0,2 order}];
xfitdat=FindFit[xpts,xexp[u],xpara ,u];
yfitdat=FindFit[ypts,yexp[u],ypara ,u];
initialcurve[u_]:={xexp[u]/.xfitdat,yexp[u]/.yfitdat};

length = NIntegrate[Sqrt[Evaluate[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\))]], {u, 0,2 \[Pi]}];centroid = 1/length NIntegrate[initialcurve[u] Sqrt[Evaluate[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(initialcurve[u]\)\))]], {u, 0,2 \[Pi]}, AccuracyGoal -> 9];

initialarea=Block[{u1,u2,a1,a2},
{u1,u2}={u,p}/.FindRoot[{initialcurve[u]==initialcurve[p]},{{u,0},{p,\[Pi]}}];

a1=1/2NIntegrate[Evaluate[(initialcurve[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(1\)\(]\)]\)\))-(initialcurve[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(2\)\(]\)]\)\))],{u,u1,u2},AccuracyGoal->10];
a2=1/2NIntegrate[Evaluate[(initialcurve[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(1\)\(]\)]\)\))-(initialcurve[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(initialcurve[u]\)[\([\)\(2\)\(]\)]\)\))],{u,u2,2\[Pi]+u1},AccuracyGoal->10];

(*{u1,u2,a1,a2,Abs[a1]+Abs[a2],Abs[Abs[a1]-Abs[a2]]}*)
Abs[a1]+Abs[a2]
];

Subscript[curve, num][u_]:=Sqrt[100 2\[Pi]/initialarea] (initialcurve[u]-centroid);

Print[
TableForm[{{
ParametricPlot[spline[u],{u,0,Length[pts]}],
Show[
ParametricPlot[initialcurve[u],{u,0,2Pi}],
ListPlot[xy,PlotStyle->{Red,PointSize[Medium]},AspectRatio->Full,Axes->False],
ListPlot[Table[initialcurve[2Pi i/100],{i,0,100}],PlotStyle->{Black}]],
Show[
ParametricPlot[Subscript[curve, num][u],{u,0,2Pi},ColorFunction->Function[{x,y,u},Hue[u]]],
ListPlot[Table[100 4\[Pi]/initialarea(xy[[i]]-centroid),{i,1,n}],PlotStyle->{Red,PointSize[Medium]},AspectRatio->Full],
ListPlot[Table[Subscript[curve, num][2Pi i/100],{i,0,100}],PlotStyle->{Black},AspectRatio->Full]
]
}}]
];

{Subscript[A0, num]=diffA[num],length,centroid}

]


Clear[diffA,iniL,iniA];

diffA[num_]:=1/2NIntegrate[Evaluate[(Subscript[curve, num][u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)[\([\)\(1\)\(]\)]\)\))-(Subscript[curve, num][u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)[\([\)\(2\)\(]\)]\)\))],{u,0,2\[Pi]},AccuracyGoal->8];

iniL[num_]:=NIntegrate[Sqrt[Evaluate[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)\))]], {u, 0,2 \[Pi]}];

iniA[num_]:=
Module[{u1,u2,a1,a2},
{u1,u2}={u,p}/.FindRoot[{Subscript[curve, num][u]==Subscript[curve, num][p]},{{u,0},{p,\[Pi]}}];

a1=1/2NIntegrate[Evaluate[(Subscript[curve, num][u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)[\([\)\(1\)\(]\)]\)\))-(Subscript[curve, num][u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)[\([\)\(2\)\(]\)]\)\))],{u,u1,u2},AccuracyGoal->10];
a2=1/2NIntegrate[Evaluate[(Subscript[curve, num][u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)[\([\)\(1\)\(]\)]\)\))-(Subscript[curve, num][u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(
\(\*SubscriptBox[\(curve\), \(num\)]\)[u]\)[\([\)\(2\)\(]\)]\)\))],{u,u2,2\[Pi]+u1},AccuracyGoal->10];

If[Chop[Abs[Abs[a1]-Abs[a2]]-Abs[Subscript[A0, num]],10^-8]!=0,Print["Error: Normalizing area failed"];];

Abs[a1]+Abs[a2];
{u1,u2,a1,a2,Abs[a1]+Abs[a2],Abs[Abs[a1]-Abs[a2]]}

];


(* ::Input:: *)
Clear[grdpts];

grdpts[num_Integer,n_Integer:150]:=
Block[{pts},
pts=Thread[Subscript[curve, num][2\[Pi] Range[0,n]/n]];
Table[{2\[Pi] i/n,pts[[i+1]]},{i,0,n}]
];


(* ::Input:: *)
Clear[proequ];

proequ[t0_:0,icpts_List]:=
Module[{n,grdpts,ugrid,X,Y,xu,xuu,yu,yuu,v,xeqns,yeqns,ic,xic,yic},

n=Length[icpts]-1;
grdpts=Range[0,n];
ugrid=icpts[[All,1]];

X[t_]=Through[Thread[Subscript[x, grdpts]][t]];
Y[t_]=Through[Thread[Subscript[y, grdpts]][t]];

xu=NDSolve`FiniteDifferenceDerivative[Derivative[1],ugrid,X[t]];
yu=NDSolve`FiniteDifferenceDerivative[Derivative[1],ugrid,Y[t]];
xuu=NDSolve`FiniteDifferenceDerivative[Derivative[2],ugrid,X[t]];
yuu=NDSolve`FiniteDifferenceDerivative[Derivative[2],ugrid,Y[t]];
v=Sqrt[xu^2+yu^2];

xeqns = Thread[\!\(
\*SubscriptBox[\(\[PartialD]\), \(t\)]\(X[t]\)\) ==v^(-2)(-v^(-2)(xu xuu +yu yuu)xu+xuu)];
yeqns = Thread[\!\(
\*SubscriptBox[\(\[PartialD]\), \(t\)]\(Y[t]\)\) ==v^(-2)(-v^(-2)(xu xuu +yu yuu)yu+yuu)];

ic=Flatten@Table[Thread[{Subscript[x, i][t0],Subscript[y, i][t0]}==icpts[[i+1,2]]],{i,0,n}];

First[
NDSolve`ProcessEquations[
Join[xeqns,yeqns,ic],
Join[Thread[Subscript[x, grdpts]],Thread[Subscript[y, grdpts]]],
t]
]

];


Clear[fit];

fit[sol_List,idA_]:=
Module[{n,t1,t2,grid,X1,Y1,X2,Y2,fddf,
dist,dmin,dmax,l1,l2,l,i,j,d,
newdist,nnew,newX,newY,newgrid,
xmdp,ymdp,order=12,xexp,yexp,xfk,yfk,xpara,ypara,yfitdat,xfitdat,fc,da,dar,renc},

{t1,t2}=First[First[sol][[2]]][[1]]-{0,1};
n=Length[sol]/2-1;
grid=Range[0,n];
fddf = NDSolve`FiniteDifferenceDerivative[Derivative[1], grid];

X1=Through[Thread[Subscript[x, grid]][t1]]/.sol;
Y1=Through[Thread[Subscript[y, grid]][t1]]/.sol;
dist=Sqrt[fddf[X1]^2 +fddf[Y1]^2];
l1=Total[Drop[dist,1]];
dmin=.8Min@dist;
dmax=Max@dist;

X2=Through[Thread[Subscript[x, grid]][t2]]/.sol;
Y2=Through[Thread[Subscript[y, grid]][t2]]/.sol;
dist=Sqrt[fddf[X2]^2 +fddf[Y2]^2];
l2=Total[Drop[dist,1]];

newdist=Reap[
For[i=1;j=0,i<= n,i++,
d=Sum[dist[[m]],{m,j+1,i}];
If[i==n,Sow[{i,d}];Break[],None,Print["Error while fitting: Break at i=n"]];
If[d>= dmin,j=i;Sow[{i,d}],None,Print["Error while fitting: Sow for d>dmin"]];
];
][[2,1]];
nnew=Length[newdist];

If[l2!=Total[newdist[[All,2]]],Print["Error after fitting: Fitted length unequal original length"];
];

Subscript[l, 0]=0;
Do[Subscript[l, i]=Subscript[l, i-1]+newdist[[i,2]],{i,1,nnew}];

newX=Through[Thread[Subscript[x, newdist[[All,1]]]][t2]]/.sol;
newY=Through[Thread[Subscript[y, newdist[[All,1]]]][t2]]/.sol;
newgrid=Table[{2\[Pi] Subscript[l, i]/l2,{newX[[i]],newY[[i]]}},{i,1,nnew}];
newgrid=Prepend[newgrid,{0,Last[newgrid][[2]]}];

xmdp=Table[{newgrid[[i,1]],newgrid[[i,2,1]]},{i,1,nnew+1}];
ymdp=Table[{newgrid[[i,1]],newgrid[[i,2,2]]},{i,1,nnew+1}];

xexp[u_]:=Sum[Subscript[xfk, i] Cos[i u]+Subscript[xfk, order+i]Sin[i u],{i,0,order}];
yexp[u_]:=Sum[Subscript[yfk, i] Cos[i u]+Subscript[yfk, order+i]Sin[i u],{i,0,order}];
xpara=Table[Subscript[xfk, i] ,{i,0,2 order}];
ypara=Table[Subscript[yfk, i] ,{i,0,2 order}];
xfitdat=FindFit[xmdp,xexp[u],xpara ,u];
yfitdat=FindFit[ymdp,yexp[u],ypara ,u];

fc[u_]:={xexp[u]/.xfitdat,yexp[u]/.yfitdat};

da=1/2NIntegrate[Evaluate[(fc[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(fc[u]\)[\([\)\(1\)\(]\)]\)\))-(fc[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(fc[u]\)[\([\)\(2\)\(]\)]\)\))],{u,0,2\[Pi]},AccuracyGoal->8];

renc[u_]:=Sqrt[idA/da] fc[u];

dar=1/2NIntegrate[Evaluate[(renc[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(renc[u]\)[\([\)\(1\)\(]\)]\)\))-(renc[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(renc[u]\)[\([\)\(2\)\(]\)]\)\))],{u,0,2\[Pi]},AccuracyGoal->8];

Print["t=",t2,", Fit: Deviation of curve length: ",100(NIntegrate[Evaluate[Sqrt[(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(renc[u]\)\)).(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(renc[u]\)\))]],{u,0,2\[Pi]}]-l2)/l2,
"%."," {da,dar,A0,dev da,dev dar} = ",{da,dar,idA,(1-da/idA)10^2,(1-dar/idA)10^2},",  ",{dmin,dmax,nnew,l2}
];

Table[{2\[Pi] i/ nnew,renc[2\[Pi] i/nnew]},{i,0,nnew}]

]


(* ::Input:: *)
Clear[evolution];

evolution[num_Integer,n_:150,Tmax_:200]:=
Module[{grid,state,dt,sol,iniarea=Subscript[A0, num],er,erp,tdummy,t},
Subscript[solution, num]={};

grid=grdpts[num,n];
state=proequ[0,grid];

For[t=0,t<Tmax,t++,
NDSolve`Iterate[state,t];
sol=NDSolve`ProcessSolutions[state];
er=Abs[10^6(1-areadiff[sol,t]/iniarea)];
erp=10^6(-(\!\(
\*SubscriptBox[\(\[PartialD]\), \(tdummy\)]\(areadiff[sol, tdummy]\)\))/.tdummy->t)/iniarea;

If[
er>=2,
Print["t=",t,", error tolerance exceeded: error=",NumberForm[er ,{4,4}],",  error derivative=",NumberForm[erp ,{4,4}]];
Subscript[solution, num]=Append[Subscript[solution, num],sol];
Block[{t1,t2,newgrid,newstate,newsol,newer1,newer2,newerp1,newerp2},
{t1,t2}=First[First[sol][[2]]][[1]];
newgrid=fit[sol,iniarea];
newstate=proequ[t2-1,newgrid];
NDSolve`Iterate[newstate,t2];
newsol=NDSolve`ProcessSolutions[newstate];
newer1=Abs[10^6(1-areadiff[newsol,t2-1]/iniarea)];
newer2=Abs[10^6(1-areadiff[newsol,t2]/iniarea)];
newerp1=10^6(-(\!\(
\*SubscriptBox[\(\[PartialD]\), \(tdummy\)]\(areadiff[newsol, tdummy]\)\))/.tdummy->(t-1))/iniarea;
newerp2=10^6(-(\!\(
\*SubscriptBox[\(\[PartialD]\), \(tdummy\)]\(areadiff[newsol, tdummy]\)\))/.tdummy->t)/iniarea;
If[newer2>= 2,
Print["t=",t2,"Error tolerance exceeded after fit,  error = ",newer2, " (",newer1,",  error derivative = ",newerp2," (",newerp1 ")"];
Abort[];
];
state=newstate;
];,

Print["t=",t,",  error=",NumberForm[er ,{4,4}] ,",  error derivative=",NumberForm[erp ,{4,4}]];
];
];

]


Clear[areadiff,length,area];

areadiff[sol_List,t_]:=
Block[{n,grid,X,Y,fddf},

n=Length[sol]/2-1;
grid=Range[0,n];
X=Through[Thread[Subscript[x, grid]][t]]/.sol;
Y=Through[Thread[Subscript[y, grid]][t]]/.sol;
fddf = NDSolve`FiniteDifferenceDerivative[Derivative[1], grid];

Total[Drop[fddf[X]Y -fddf[Y]X,1]]/2

];

length[sol_List,t_]:=
Block[{n,grid,X,Y,fddf},

n=Length[sol]/2-1;
grid=Range[0,n];
X=Through[Thread[Subscript[x, grid]][t]]/.sol;
Y=Through[Thread[Subscript[y, grid]][t]]/.sol;
fddf = NDSolve`FiniteDifferenceDerivative[Derivative[1], grid];

Total[Drop[Sqrt[fddf[X]^2 +fddf[Y]^2],1]]

];


Clear[lineplot3d,evoplot3d];

lineplot3d[sol_List,scale_,maxtime_,opts___]:=
Module[{plots,n,t1,t2},

n=Length[sol]/2-1;
{t1,t2}=First[First[sol][[2]][[1]]];
(*If[t2<=99&&t2>1,t2=t2-1];*)
If[t2!=maxtime,t2=t2-1];

plots=Table[{scale  Subscript[x, i][t]/.sol[[i+1]],scale  Subscript[y, i][t]/.sol[[i+n+2]],t},{i,1,n}
];
ParametricPlot3D[plots//Evaluate,{t,t1,t2},AspectRatio->1,PerformanceGoal->"Speed",opts]
];

evoplot3d[num_,scale_:1,maxtime_:1000]:=
Module[{sol,n,tmax,curplot,lineplots},
sol=Subscript[solution, num];
n=Length@sol;
tmax=First[First[sol[[n]]][[2]]][[1]][[2]];

curplot=ParametricPlot3D[{Flatten@{scale Subscript[curve, num][u],0},{0,0,tmax}},{u,0,2\[Pi]},ColorFunction->Function[{x,y,z,u},Hue[u]]];
lineplots=Table[lineplot3d[sol[[i]],scale,maxtime,Boxed->False,Axes->True,PlotStyle->{{Black,Thin}}],{i,1,n}];

Show[curplot,lineplots]
]


Clear[coordselect,indexselect];

coordselect[sol_,t_]:=
Module[{n,ttab,i,grid,X,Y},
n=Length[sol];
ttab=Table[First[First[sol[[i]]][[2]]][[1]][[1]],{i,1,n}];
ttab=Append[ttab,First[First[sol[[n]]][[2]]][[1]][[2]]];
If[t<0||t>ttab[[n+1]],
Print["Error (selector): time value (",t,") lies outside the range of data."];
Abort[];
];
For[i=1,i<=n&&t>ttab[[i+1]],i++
];
grid=Range[0,Length[sol[[i]]]/2 -1];
X=Through[Thread[Subscript[x, grid]][t]]/.sol[[i]];
Y=Through[Thread[Subscript[y, grid]][t]]/.sol[[i]];
{X,Y}
];

indexselect[sol_,t_]:=
Module[{n,ttab,i,grid,X,Y},
n=Length[sol];
ttab=Table[First[First[sol[[i]]][[2]]][[1]][[1]],{i,1,n}];
ttab=Append[ttab,First[First[sol[[n]]][[2]]][[1]][[2]]];
If[t<0||t>ttab[[n+1]],
Print["Error (selector): time value (",t,") lies outside the range of data."];
Abort[];
];
For[i=1,i<=n&&t>ttab[[i+1]],i++
];
i
];


Clear[centroid];

centroid[num_,t_]:=
Module[{X,Y,n,fddf,v,l},
{X,Y}=coordselect[Subscript[solution, num],t];
n=Length@X-1;
fddf = NDSolve`FiniteDifferenceDerivative[Derivative[1], Range[0,n],DifferenceOrder->6];
v=Sqrt[fddf[X]^2 +fddf[Y]^2];
l=Total[Drop[v,1]];

{Total[Drop[X v,1] ],Total[Drop[Y v,1]]}/l

];


Clear[flength,farea,isofit,action];

flength[num_,t_]:=
Module[{sol,i},
sol=Subscript[solution, num];
i=indexselect[sol,t];
length[sol[[i]],t]
];



isofit[num_,fitpts_:100,order_:20]:=
Block[{tt=99.9,list,ifi},
list=Append[Table[{tt i/fitpts,flength[num,tt i/fitpts]^2/farea[num,tt i/fitpts]},{i,0,fitpts}],{100,4\[Pi]}];
Subscript[iso, num][t_]=Fit[list,Thread[t^Range[0,order]],t];
Subscript[l, num][t_]=Sqrt[Subscript[iso, num][t](200\[Pi]-2\[Pi] t)];

];

action[n_,num_,t_]:=(Subscript[iso, num][t](1+(c[t]/.Subscript[zsol, n][[1]])/Subscript[l, num][t]));


farea[num_,t_]:=
Module[{sol,X,Y,n,dgrid,fddf,dist,ltotal,l,grid,xmdp,ymdp,order=16,xexp,yexp,xfk,yfk,xpara,ypara,yfitdat,xfitdat,fc,area},
sol=Subscript[solution, num];
{X,Y}=coordselect[sol,t];

n=Length[X]-1;
dgrid=Range[0,n];
fddf = NDSolve`FiniteDifferenceDerivative[Derivative[1], dgrid];

dist=Sqrt[fddf[X]^2 +fddf[Y]^2];
ltotal=Total[Drop[dist,1]];

Subscript[l, 0]=0;
Do[Subscript[l, i]=Subscript[l, i-1]+dist[[i]],{i,1,n}];

grid=Table[{2\[Pi] Subscript[l, i]/ltotal,{X[[i]],Y[[i]]}},{i,1,n}];
grid=Prepend[grid,{0,Last[grid][[2]]}];

xmdp=Table[{grid[[i,1]],grid[[i,2,1]]},{i,1,n+1}];
ymdp=Table[{grid[[i,1]],grid[[i,2,2]]},{i,1,n+1}];

xexp[u_]:=Sum[Subscript[xfk, i] Cos[i u]+Subscript[xfk, order+i]Sin[i u],{i,0,order}];
yexp[u_]:=Sum[Subscript[yfk, i] Cos[i u]+Subscript[yfk, order+i]Sin[i u],{i,0,order}];
xpara=Table[Subscript[xfk, i] ,{i,0,2 order}];
ypara=Table[Subscript[yfk, i] ,{i,0,2 order}];
xfitdat=FindFit[xmdp,xexp[u],xpara ,u];
yfitdat=FindFit[ymdp,yexp[u],ypara ,u];

fc[u_]:={xexp[u]/.xfitdat,yexp[u]/.yfitdat};

(*area=Block[{u1,u2,a1,a2},
{u1,u2}={u,p}/.FindRoot[{fc[u]==fc[p]},{{u,0\[Pi]},{p,\[Pi]}},MaxIterations->100];

a1=1/2NIntegrate[Evaluate[(fc[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(fc[u]\)[\([1]\)]\)\))-(fc[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(fc[u]\)[\([2]\)]\)\))],{u,u1,u2},AccuracyGoal->8];
a2=1/2NIntegrate[Evaluate[(fc[u][[2]])( \!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(fc[u]\)[\([1]\)]\)\))-(fc[u][[1]])(\!\(
\*SubscriptBox[\(\[PartialD]\), \(u\)]\(\(fc[u]\)[\([2]\)]\)\))],{u,u2,2\[Pi]+u1},AccuracyGoal->8];

Abs[a1]+Abs[a2];
{u1,u2,a1,a2,Abs[Abs[a1]-Abs[a2]],Abs[a1]+Abs[a2]}

]*)
fc[u]
];


Clear[uf];uf[u_]=farea[2,0];


FindRoot[{uf[u]==uf[p]},{{u,\[Pi]/2,0,2\[Pi]},{p,3/2\[Pi],0,2\[Pi]}},MaxIterations->500]


ParametricPlot[uf[u],{u,0.4,1.17Pi}]


iniA[2]


Show[ParametricPlot[{Subscript[curve, 1][u]},{u,0\[Pi],2\[Pi]},PlotStyle->{Green,Blue}],ListPlot[Table[{Subscript[x, i][0],Subscript[y, i][0]}/.Subscript[solution, 1][[1]],{i,0,150}]]]



